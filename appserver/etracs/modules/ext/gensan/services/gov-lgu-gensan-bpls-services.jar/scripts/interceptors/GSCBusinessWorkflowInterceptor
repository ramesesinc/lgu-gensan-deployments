import com.rameses.annotations.*;

class GSCBusinessWorkflowInterceptor {

	@ActiveDB('gsc_business_application') 
	def app_db; 

	@DataContext('business_application_task') 
	def task_db;

	@DataContext('business_application_task_lock') 
	def tasklock_db;

	@After( pattern="BusinessApplicationWorkflowService.signal") 
	public void afterSignal( evt ) { 
		def result = evt.result; 
		if ( !result ) return; 

		def appid = result.task?.refid; 
		if ( !appid ) return; 

		def tostate = result.task?.state; 
		if ( !tostate ) return; 

		def taskid = result.task?.objid; 
		def fromaction = evt.args[0].action; 
		//println 'from-action -> '+ fromaction; 
		//println 'to-state    -> '+ tostate; 
		if ( fromaction == 'return-assessment' ) {
			def app = app_db.findApplication([ objid: appid ]); 
			def newstate = (app.apptype.toString() == 'NEW' ? 'assessment-new' : 'reassessment'); 

			task_db.find([ objid: taskid ]).update([ 
				assignee: [objid: app.assessor?.objid, name: app.assessor?.name], state: newstate 
			]); 

			app_db.updateAppState([ objid: appid, state: 'ASSESSMENT' ]); 

			if ( !tasklock_db.find([ refid: appid, state: newstate ]).first()) { 
				tasklock_db.create([ refid: appid, state: newstate ]); 
				tasklock_db.find([ refid: appid ]).where(' state <> :state ', [state: newstate]).delete(); 
			} 
		} 

		result.each{ k,v-> 
			println '>> '+ k;
		}		
	} 
}